name: r2s config

on:
  workflow_dispatch:
  workflow_call:
  # schedule:
  #   - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/VIKINGYFY/immortalwrt.git
  REPO_BRANCH: main
  CONFIG_FILE: configs/Taiyi.config
  DIY_SCRIPT: scripts/Roc-script.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: Taiyi-Master
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    - name: Check Server Performance(检查服务器性能)
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment(初始化环境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"
        # sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'

    - name: Combine Disks(合并磁盘)
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code(克隆源代码)
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone --depth 1 -b $REPO_BRANCH $REPO_URL openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' include/kernel-6.6)
        echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV
        if git log --since="$(date -d 'yesterday 00:00' '+%Y-%m-%dT%H:%M:%S')" --until="$(date -d 'today 00:00' '+%Y-%m-%dT%H:%M:%S')" --pretty=format:"%h %s" --no-merges -- . ':(exclude)scripts/feeds' | grep -q .; then
        VERSION_LOG=$(git log --since="$(date -d 'yesterday 00:00' '+%Y-%m-%dT%H:%M:%S')" --until="$(date -d 'today 00:00' '+%Y-%m-%dT%H:%M:%S')" --pretty=format:"%h %s" --no-merges -- . ':(exclude)scripts/feeds')
        echo "VERSION_LOG=$VERSION_LOG" >> $GITHUB_ENV
        else
        echo "VERSION_LOG=暂无更新" >> $GITHUB_ENV
        fi

    - name: Generate Variables(生成变量)
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: Cache Toolchain(缓存工具链)
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}
    
    - name: Install Feeds(安装feeds)
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a
  
    - name: Load Custom Configuration(加载自定义配置)
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        chmod +x $DIY_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT
        
    - name: SSH链接管理
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

    - name: 提取config
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt
        make defconfig
        ls -a
        sudo mkdir ${{ env.CONFIG }}config && sudo cp .config ${{ env.CONFIG }}config/${{ env.CONFIG }}.config
        cd ${{ env.CONFIG }}config
        ls
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: 上传config
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.CONFIG }}_config${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 上传config文件并发布
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
