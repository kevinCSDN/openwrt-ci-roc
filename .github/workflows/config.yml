name: r2s config

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'true'
        type: choice
        options:
          - true
          - false

env:
  REPO_URL: https://github.com/VIKINGYFY/immortalwrt.git
  REPO_BRANCH: main
  CONFIG_FILE: configs/Taiyi.config
  DIY_SCRIPT: scripts/Roc-script.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: Taiyi-Master
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04
    


    steps:
    - name: 创建编译空间挂载点
      run: |
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir


    
    - name: Check Server Performance(检查服务器性能)
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment(初始化环境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"
        # sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'

    - name: Combine Disks(合并磁盘)
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        


    - name: Cache Toolchain(缓存工具链)
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}
        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
       

        
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a
      
    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a -f

    - name: Openwrt AutoUpdate
      run: |
        TEMP=$(date +"OpenWrt_%Y%m%d_%H%M%S_")$(git rev-parse --short HEAD)
        echo "RELEASE_TAG=$TEMP" >> $GITHUB_ENV
        #required>>add "DISTRIB_GITHUB" to "zzz-default-settings"
        #sed -i "/DISTRIB_DESCRIPTION=/a\sed -i '/DISTRIB_GITHUB/d' /etc/openwrt_release" openwrt/package/lean/default-settings/files/zzz-default-settings
        #sed -i "/DISTRIB_GITHUB/a\echo \"DISTRIB_GITHUB=\'https://github.com/${{github.repository}}\'\" >> /etc/openwrt_release" openwrt/package/lean/default-settings/files/zzz-default-settings
        #required>>add "DISTRIB_VERSIONS" to "zzz-default-settings"
        #sed -i "/DISTRIB_DESCRIPTION=/a\sed -i '/DISTRIB_VERSIONS/d' /etc/openwrt_release" openwrt/package/lean/default-settings/files/zzz-default-settings
        #sed -i "/DISTRIB_VERSIONS/a\echo \"DISTRIB_VERSIONS=\'${TEMP:8}\'\" >> /etc/openwrt_release" openwrt/package/lean/default-settings/files/zzz-default-settings
        #nonessential>>add "github.actor" to "DISTRIB_DESCRIPTION" in "zzz-default-settings"
        #sed -i "s/OpenWrt /${{github.actor}} compiled (${TEMP:8}) \/ OpenWrt /g" openwrt/package/lean/default-settings/files/zzz-default-settings

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        #cat package/lean/default-settings/files/zzz-default-settings
        
    - name: SSH链接管理
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

    - name: 提取config
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt
        make defconfig
        ls -a
        sudo mkdir ${{ env.CONFIG }}config && sudo cp .config ${{ env.CONFIG }}config/${{ env.CONFIG }}.config
        cd ${{ env.CONFIG }}config
        ls
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: 上传config
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.CONFIG }}_config${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 上传config文件并发布
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
